async function insertNode() {
    const key = document.getElementById("key").value;
    const priority = document.getElementById("priority").value || null;
    const heapType = document.getElementById("heapType").value; // L·∫•y ki·ªÉu Heap t·ª´ dropdown

    if (!key) {
        alert("Please enter a key.");
        return;
    }

    const response = await fetch("http://localhost:5000/insert", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ key: parseInt(key), priority: priority ? parseInt(priority) : null,
            heapType: heapType  // G·ª≠i ki·ªÉu heap (max ho·∫∑c min)
         }),
    });

    const treap = await response.json();
    drawTreap(treap);
}

async function searchNode() {
    let keyInput = document.getElementById("key"); // L·∫•y gi√° tr·ªã t·ª´ input
    const heapType = document.getElementById("heapType").value; // L·∫•y ki·ªÉu heap t·ª´ dropdown
    if (!keyInput) {
        console.error("L·ªói: Kh√¥ng t√¨m th·∫•y input c√≥ ID 'key'");
        alert("L·ªói: Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p key!");
        return;
    }

    let key = keyInput.value.trim(); // L·∫•y gi√° tr·ªã v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng

    if (key === "") {
        alert("Vui l√≤ng nh·∫≠p m·ªôt key h·ª£p l·ªá!");
        return;
    }

    key = Number(key); // Chuy·ªÉn key th√†nh s·ªë
    if (isNaN(key)) {
        alert("Key ph·∫£i l√† m·ªôt s·ªë!");
        return;
    }

    console.log("üîç Searching for:", key);

    const response = await fetch("http://localhost:5000/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ key: key, 
            heapType: heapType // G·ª≠i ki·ªÉu heap (max ho·∫∑c min)
         }) // G·ª≠i ƒë√∫ng ƒë·ªãnh d·∫°ng JSON
    });

    const result = await response.json();
    console.log("üìå Search result:", result);

    if (result.error) {
        alert(result.error);
    } else {
        alert(`‚úÖ Found: key ${result.key}, priority ${result.priority}`);
    }
}

async function deleteNode() {
    const key = document.getElementById("key").value;
    const heapType = document.getElementById("heapType").value; // L·∫•y ki·ªÉu heap t·ª´ dropdown
    if (!key) {
        alert("Please enter a key to delete.");
        return;
    }

    console.log("Sending delete request for key:", key); // Debug log

    const response = await fetch("http://localhost:5000/delete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ key: parseInt(key),
            heapType: heapType // G·ª≠i ki·ªÉu heap (max ho·∫∑c min)
         }),
    });

    const treap = await response.json();
    console.log("Updated Treap:", treap); // Debug log
    drawTreap(treap); // C·∫≠p nh·∫≠t l·∫°i UI
}




// ƒê·∫£m b·∫£o c√°c h√†m n√†y c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ index.html
window.searchNode = searchNode;
window.deleteNode = deleteNode;
